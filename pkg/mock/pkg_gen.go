// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"github.com/secmon-lab/hatchery/pkg/interfaces"
	"net/http"
	"sync"
)

// Ensure, that HTTPClientMock does implement interfaces.HTTPClient.
// If this is not the case, regenerate this file with moq.
var _ interfaces.HTTPClient = &HTTPClientMock{}

// HTTPClientMock is a mock implementation of interfaces.HTTPClient.
//
//	func TestSomethingThatUsesHTTPClient(t *testing.T) {
//
//		// make and configure a mocked interfaces.HTTPClient
//		mockedHTTPClient := &HTTPClientMock{
//			DoFunc: func(req *http.Request) (*http.Response, error) {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedHTTPClient in code that requires interfaces.HTTPClient
//		// and then make assertions.
//
//	}
type HTTPClientMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(req *http.Request) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Req is the req argument value.
			Req *http.Request
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *HTTPClientMock) Do(req *http.Request) (*http.Response, error) {
	if mock.DoFunc == nil {
		panic("HTTPClientMock.DoFunc: method is nil but HTTPClient.Do was just called")
	}
	callInfo := struct {
		Req *http.Request
	}{
		Req: req,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(req)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedHTTPClient.DoCalls())
func (mock *HTTPClientMock) DoCalls() []struct {
	Req *http.Request
} {
	var calls []struct {
		Req *http.Request
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}

// Ensure, that SQSMock does implement interfaces.SQS.
// If this is not the case, regenerate this file with moq.
var _ interfaces.SQS = &SQSMock{}

// SQSMock is a mock implementation of interfaces.SQS.
//
//	func TestSomethingThatUsesSQS(t *testing.T) {
//
//		// make and configure a mocked interfaces.SQS
//		mockedSQS := &SQSMock{
//			DeleteMessageFunc: func(ctx context.Context, params *sqs.DeleteMessageInput, optFns ...func(*sqs.Options)) (*sqs.DeleteMessageOutput, error) {
//				panic("mock out the DeleteMessage method")
//			},
//			ReceiveMessageFunc: func(ctx context.Context, params *sqs.ReceiveMessageInput, optFns ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error) {
//				panic("mock out the ReceiveMessage method")
//			},
//		}
//
//		// use mockedSQS in code that requires interfaces.SQS
//		// and then make assertions.
//
//	}
type SQSMock struct {
	// DeleteMessageFunc mocks the DeleteMessage method.
	DeleteMessageFunc func(ctx context.Context, params *sqs.DeleteMessageInput, optFns ...func(*sqs.Options)) (*sqs.DeleteMessageOutput, error)

	// ReceiveMessageFunc mocks the ReceiveMessage method.
	ReceiveMessageFunc func(ctx context.Context, params *sqs.ReceiveMessageInput, optFns ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteMessage holds details about calls to the DeleteMessage method.
		DeleteMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *sqs.DeleteMessageInput
			// OptFns is the optFns argument value.
			OptFns []func(*sqs.Options)
		}
		// ReceiveMessage holds details about calls to the ReceiveMessage method.
		ReceiveMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *sqs.ReceiveMessageInput
			// OptFns is the optFns argument value.
			OptFns []func(*sqs.Options)
		}
	}
	lockDeleteMessage  sync.RWMutex
	lockReceiveMessage sync.RWMutex
}

// DeleteMessage calls DeleteMessageFunc.
func (mock *SQSMock) DeleteMessage(ctx context.Context, params *sqs.DeleteMessageInput, optFns ...func(*sqs.Options)) (*sqs.DeleteMessageOutput, error) {
	if mock.DeleteMessageFunc == nil {
		panic("SQSMock.DeleteMessageFunc: method is nil but SQS.DeleteMessage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *sqs.DeleteMessageInput
		OptFns []func(*sqs.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteMessage.Lock()
	mock.calls.DeleteMessage = append(mock.calls.DeleteMessage, callInfo)
	mock.lockDeleteMessage.Unlock()
	return mock.DeleteMessageFunc(ctx, params, optFns...)
}

// DeleteMessageCalls gets all the calls that were made to DeleteMessage.
// Check the length with:
//
//	len(mockedSQS.DeleteMessageCalls())
func (mock *SQSMock) DeleteMessageCalls() []struct {
	Ctx    context.Context
	Params *sqs.DeleteMessageInput
	OptFns []func(*sqs.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *sqs.DeleteMessageInput
		OptFns []func(*sqs.Options)
	}
	mock.lockDeleteMessage.RLock()
	calls = mock.calls.DeleteMessage
	mock.lockDeleteMessage.RUnlock()
	return calls
}

// ReceiveMessage calls ReceiveMessageFunc.
func (mock *SQSMock) ReceiveMessage(ctx context.Context, params *sqs.ReceiveMessageInput, optFns ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error) {
	if mock.ReceiveMessageFunc == nil {
		panic("SQSMock.ReceiveMessageFunc: method is nil but SQS.ReceiveMessage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *sqs.ReceiveMessageInput
		OptFns []func(*sqs.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockReceiveMessage.Lock()
	mock.calls.ReceiveMessage = append(mock.calls.ReceiveMessage, callInfo)
	mock.lockReceiveMessage.Unlock()
	return mock.ReceiveMessageFunc(ctx, params, optFns...)
}

// ReceiveMessageCalls gets all the calls that were made to ReceiveMessage.
// Check the length with:
//
//	len(mockedSQS.ReceiveMessageCalls())
func (mock *SQSMock) ReceiveMessageCalls() []struct {
	Ctx    context.Context
	Params *sqs.ReceiveMessageInput
	OptFns []func(*sqs.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *sqs.ReceiveMessageInput
		OptFns []func(*sqs.Options)
	}
	mock.lockReceiveMessage.RLock()
	calls = mock.calls.ReceiveMessage
	mock.lockReceiveMessage.RUnlock()
	return calls
}

// Ensure, that S3Mock does implement interfaces.S3.
// If this is not the case, regenerate this file with moq.
var _ interfaces.S3 = &S3Mock{}

// S3Mock is a mock implementation of interfaces.S3.
//
//	func TestSomethingThatUsesS3(t *testing.T) {
//
//		// make and configure a mocked interfaces.S3
//		mockedS3 := &S3Mock{
//			GetObjectFunc: func(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
//				panic("mock out the GetObject method")
//			},
//		}
//
//		// use mockedS3 in code that requires interfaces.S3
//		// and then make assertions.
//
//	}
type S3Mock struct {
	// GetObjectFunc mocks the GetObject method.
	GetObjectFunc func(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetObject holds details about calls to the GetObject method.
		GetObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetObjectInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
	}
	lockGetObject sync.RWMutex
}

// GetObject calls GetObjectFunc.
func (mock *S3Mock) GetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	if mock.GetObjectFunc == nil {
		panic("S3Mock.GetObjectFunc: method is nil but S3.GetObject was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetObjectInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetObject.Lock()
	mock.calls.GetObject = append(mock.calls.GetObject, callInfo)
	mock.lockGetObject.Unlock()
	return mock.GetObjectFunc(ctx, params, optFns...)
}

// GetObjectCalls gets all the calls that were made to GetObject.
// Check the length with:
//
//	len(mockedS3.GetObjectCalls())
func (mock *S3Mock) GetObjectCalls() []struct {
	Ctx    context.Context
	Params *s3.GetObjectInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetObjectInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetObject.RLock()
	calls = mock.calls.GetObject
	mock.lockGetObject.RUnlock()
	return calls
}
